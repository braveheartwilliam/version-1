/ src/bil / schemas / verification.ts;
import { z } from 'zod';
import { createSelectSchema, createInsertSchema } from 'drizzle-zod';
import { verification } from '../../server/auth/auth-schema';

// Select schema (for querying verifications)
export const verificationSelectSchema = createSelectSchema(verification).extend({
	id: z.string().min(1, 'ID is required'),
	identifier: z.string().min(1, 'Identifier is required'), // e.g., email
	value: z.string().min(1, 'Value is required'), // e.g., token
	expiresAt: z
		.number()
		.int()
		.transform((val) => new Date(val)),
	createdAt: z
		.number()
		.int()
		.nullable()
		.transform((val) => (val ? new Date(val) : null)),
	updatedAt: z
		.number()
		.int()
		.nullable()
		.transform((val) => (val ? new Date(val) : null))
});

export type VerificationSelect = z.infer<typeof verificationSelectSchema>;

// Insert schema (for creating verifications)
export const verificationInsertSchema = createInsertSchema(verification)
	.omit({ id: true, createdAt: true, updatedAt: true }) // Auto-generated
	.extend({
		identifier: z.string().min(1, 'Identifier is required'),
		value: z.string().min(1, 'Value is required'),
		expiresAt: z
			.number()
			.int()
			.transform((val) => new Date(val))
	});

export type VerificationInsert = z.infer<typeof verificationInsertSchema>;
